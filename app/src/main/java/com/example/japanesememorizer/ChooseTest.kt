package com.example.japanesememorizer

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.Switch

class ChooseTest : AppCompatActivity() {
    data class Hiragana (
        val syllable: String,
        val roman: String
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_choose_test)
    }
    fun toTestFromHiragana(view: View){
        val button = findViewById<Button>(R.id.test_hiragana)
        val message = "hiragana"

        val chosen: MutableList<Hiragana> = mutableListOf()
        chosen.add(Hiragana("あ", "A"))
        chosen.add(Hiragana("い", "I"))
        chosen.add(Hiragana("う", "U"))
        chosen.add(Hiragana("え", "E"))
        chosen.add(Hiragana("お", "O"))
        chosen.add(Hiragana("さ", "SA"))
        chosen.add(Hiragana("し", "SHI"))
        chosen.add(Hiragana("す", "SU"))
        chosen.add(Hiragana("せ", "SE"))
        chosen.add(Hiragana("そ", "SO"))
        chosen.add(Hiragana("た", "TA"))
        chosen.add(Hiragana("ち", "CHI"))
        chosen.add(Hiragana("つ", "TSU"))
        chosen.add(Hiragana("て", "TE"))
        chosen.add(Hiragana("と", "TO"))
        chosen.add(Hiragana("は", "HA"))
        chosen.add(Hiragana("ひ", "HI"))
        chosen.add(Hiragana("ふ", "FU"))
        chosen.add(Hiragana("へ", "HE"))
        chosen.add(Hiragana("ほ", "HO"))
        chosen.add(Hiragana("ま", "MA"))
        chosen.add(Hiragana("み", "MI"))
        chosen.add(Hiragana("む", "MU"))
        chosen.add(Hiragana("め", "ME"))
        chosen.add(Hiragana("も", "MO"))
        chosen.add(Hiragana("ら", "RA"))
        chosen.add(Hiragana("り", "RI"))
        chosen.add(Hiragana("る", "RU"))
        chosen.add(Hiragana("れ", "RE"))
        chosen.add(Hiragana("ろ", "RO"))
        chosen.add(Hiragana("な", "NA"))
        chosen.add(Hiragana("に", "NI"))
        chosen.add(Hiragana("ぬ", "NU"))
        chosen.add(Hiragana("ね", "NE"))
        chosen.add(Hiragana("の", "NO"))
        chosen.add(Hiragana("きゃ", "KYA"))
        chosen.add(Hiragana("きゅ", "KYU"))
        chosen.add(Hiragana("きょ", "KYO"))
        chosen.add(Hiragana("ぎゃ", "GYA"))
        chosen.add(Hiragana("ぎゅ", "GYU"))
        chosen.add(Hiragana("ぎょ", "GYO"))
        chosen.add(Hiragana("しゃ", "SHA"))
        chosen.add(Hiragana("しゅ", "SHU"))
        chosen.add(Hiragana("しょ", "SHO"))
        chosen.add(Hiragana("じゃ", "JA"))
        chosen.add(Hiragana("じゅ", "JU"))
        chosen.add(Hiragana("じょ", "JO"))
        chosen.add(Hiragana("ちゃ", "CHA"))
        chosen.add(Hiragana("ちゅ", "CHU"))
        chosen.add(Hiragana("ちょ", "CHO"))
        chosen.add(Hiragana("りゃ", "RYA"))
        chosen.add(Hiragana("りゅ", "RYU"))
        chosen.add(Hiragana("りょ", "RYO"))
        chosen.add(Hiragana("が", "GA"))
        chosen.add(Hiragana("ぎ", "GI"))
        chosen.add(Hiragana("ぐ", "GU"))
        chosen.add(Hiragana("げ", "GE"))
        chosen.add(Hiragana("ご", "GO"))
        chosen.add(Hiragana("ざ", "ZA"))
        chosen.add(Hiragana("じ", "JI"))
        chosen.add(Hiragana("ず", "ZU"))
        chosen.add(Hiragana("ぜ", "ZE"))
        chosen.add(Hiragana("ぞ", "ZO"))
        chosen.add(Hiragana("だ", "DA"))
        chosen.add(Hiragana("ぢ", "DZI"))
        chosen.add(Hiragana("づ", "DZU"))
        chosen.add(Hiragana("で", "DE"))
        chosen.add(Hiragana("ど","DO"))
        chosen.add(Hiragana("ば", "BA"))
        chosen.add(Hiragana("び", "BI"))
        chosen.add(Hiragana("ぶ", "BU"))
        chosen.add(Hiragana("べ", "BE"))
        chosen.add(Hiragana("ぼ", "BO"))
        chosen.add(Hiragana("ぱ", "PA"))
        chosen.add(Hiragana("ぴ", "PI"))
        chosen.add(Hiragana("ぷ", "PU"))
        chosen.add(Hiragana("ぺ", "PE"))
        chosen.add(Hiragana("ぽ", "PO"))
        chosen.add(Hiragana("や", "YA"))
        chosen.add(Hiragana("ゆ", "YU"))
        chosen.add(Hiragana("よ", "YO"))
        chosen.add(Hiragana("わ", "WA"))
        chosen.add(Hiragana("を", "WO"))
        chosen.add(Hiragana("ん", "N"))
        chosen.add(Hiragana("にゃ", "NYA"))
        chosen.add(Hiragana("にゅ", "NYU"))
        chosen.add(Hiragana("にょ", "NYO"))
        chosen.add(Hiragana("ひゃ", "HYA"))
        chosen.add(Hiragana("ひゅ", "HYU"))
        chosen.add(Hiragana("ひょ", "HYO"))
        chosen.add(Hiragana("びゃ", "BYA"))
        chosen.add(Hiragana("びゅ", "BYU"))
        chosen.add(Hiragana("びょ", "BYO"))
        chosen.add(Hiragana("みゃ", "MYA"))
        chosen.add(Hiragana("みゅ", "MYU"))
        chosen.add(Hiragana("みょ", "MYO"))
        chosen.add(Hiragana("ぴゃ", "PYA"))
        chosen.add(Hiragana("ぴゅ", "PYU"))
        chosen.add(Hiragana("ぴょ", "PYO"))

        val list1: MutableList<String> = mutableListOf()
        val list2: MutableList<String> = mutableListOf()

        for(i in chosen){
            list1.add(i.syllable)
            list2.add(i.roman)
        }
        val arr1: Array<String> = list1.toTypedArray()
        val arr2: Array<String> = list2.toTypedArray()


        val intent = Intent(this,Test::class.java).apply{
            putExtra("syllable", arr1)
            putExtra("roman", arr2)
            putExtra("choice", message)
        }
        startActivity(intent)
    }

    fun toTestFromKatakana(view: View){
        val button = findViewById<Button>(R.id.test_katakana)
        val message = "katakana"

        val chosen: MutableList<Hiragana> = mutableListOf()
        chosen.add(Hiragana("ア", "A"))
        chosen.add(Hiragana("イ", "I"))
        chosen.add(Hiragana("ウ", "U"))
        chosen.add(Hiragana("エ", "E"))
        chosen.add(Hiragana("オ", "O"))
        chosen.add(Hiragana("カ", "KA"))
        chosen.add(Hiragana("キ", "KI"))
        chosen.add(Hiragana("ク", "KU"))
        chosen.add(Hiragana("ケ", "KE"))
        chosen.add(Hiragana("コ", "KO"))
        chosen.add(Hiragana("サ", "SA"))
        chosen.add(Hiragana("シ", "SHI"))
        chosen.add(Hiragana("ス", "SU"))
        chosen.add(Hiragana("セ", "SE"))
        chosen.add(Hiragana("ソ", "SO"))
        chosen.add(Hiragana("タ", "TA"))
        chosen.add(Hiragana("チ", "CHI"))
        chosen.add(Hiragana("ツ", "TSU"))
        chosen.add(Hiragana("テ", "TE"))
        chosen.add(Hiragana("ト", "TO"))
        chosen.add(Hiragana("ハ", "HA"))
        chosen.add(Hiragana("ヒ", "HI"))
        chosen.add(Hiragana("フ", "FU"))
        chosen.add(Hiragana("ヘ", "HE"))
        chosen.add(Hiragana("ホ", "HO"))
        chosen.add(Hiragana("マ", "MA"))
        chosen.add(Hiragana("ミ", "MI"))
        chosen.add(Hiragana("ム", "MU"))
        chosen.add(Hiragana("メ", "ME"))
        chosen.add(Hiragana("モ", "MO"))
        chosen.add(Hiragana("ラ", "RA"))
        chosen.add(Hiragana("リ", "RI"))
        chosen.add(Hiragana("ル", "RU"))
        chosen.add(Hiragana("レ", "RE"))
        chosen.add(Hiragana("ロ", "RO"))
        chosen.add(Hiragana("ナ", "NA"))
        chosen.add(Hiragana("ニ", "NI"))
        chosen.add(Hiragana("ヌ", "NU"))
        chosen.add(Hiragana("ネ", "NE"))
        chosen.add(Hiragana("ノ", "NO"))
        chosen.add(Hiragana("キャ", "KYA"))
        chosen.add(Hiragana("キュ", "KYU"))
        chosen.add(Hiragana("キョ", "KYO"))
        chosen.add(Hiragana("ギャ", "GYA"))
        chosen.add(Hiragana("ギュ", "GYU"))
        chosen.add(Hiragana("ギョ", "GYO"))
        chosen.add(Hiragana("シャ", "SHA"))
        chosen.add(Hiragana("シュ", "SHU"))
        chosen.add(Hiragana("ショ", "SHO"))
        chosen.add(Hiragana("ジャ", "JA"))
        chosen.add(Hiragana("ジュ", "JU"))
        chosen.add(Hiragana("ジョ", "JO"))
        chosen.add(Hiragana("チャ", "CHA"))
        chosen.add(Hiragana("チュ", "CHU"))
        chosen.add(Hiragana("チョ", "CHO"))
        chosen.add(Hiragana("リャ", "RYA"))
        chosen.add(Hiragana("リュ", "RYU"))
        chosen.add(Hiragana("リョ", "RYO"))
        chosen.add(Hiragana("ガ", "GA"))
        chosen.add(Hiragana("ギ", "GI"))
        chosen.add(Hiragana("グ", "GU"))
        chosen.add(Hiragana("ゲ", "GE"))
        chosen.add(Hiragana("ゴ", "GO"))
        chosen.add(Hiragana("ザ", "ZA"))
        chosen.add(Hiragana("ジ", "JI"))
        chosen.add(Hiragana("ズ", "ZU"))
        chosen.add(Hiragana("ゼ", "ZE"))
        chosen.add(Hiragana("ゾ", "ZO"))
        chosen.add(Hiragana("ダ", "DA"))
        chosen.add(Hiragana("ヂ", "DZI"))
        chosen.add(Hiragana("ヅ", "DZU"))
        chosen.add(Hiragana("デ", "DE"))
        chosen.add(Hiragana("ド","DO"))
        chosen.add(Hiragana("バ", "BA"))
        chosen.add(Hiragana("ビ", "BI"))
        chosen.add(Hiragana("ブ", "BU"))
        chosen.add(Hiragana("ベ", "BE"))
        chosen.add(Hiragana("ボ", "BO"))
        chosen.add(Hiragana("パ", "PA"))
        chosen.add(Hiragana("ピ", "PI"))
        chosen.add(Hiragana("プ", "PU"))
        chosen.add(Hiragana("ペ", "PE"))
        chosen.add(Hiragana("ポ", "PO"))
        chosen.add(Hiragana("ヤ", "YA"))
        chosen.add(Hiragana("ユ", "YU"))
        chosen.add(Hiragana("ヨ", "YO"))
        chosen.add(Hiragana("ワ", "WA"))
        chosen.add(Hiragana("ヲ", "WO"))
        chosen.add(Hiragana("ン", "N"))
        chosen.add(Hiragana("ニャ", "NYA"))
        chosen.add(Hiragana("ニュ", "NYU"))
        chosen.add(Hiragana("ニョ", "NYO"))
        chosen.add(Hiragana("ヒャ", "HYA"))
        chosen.add(Hiragana("ヒュ", "HYU"))
        chosen.add(Hiragana("ヒョ", "HYO"))
        chosen.add(Hiragana("ビャ", "BYA"))
        chosen.add(Hiragana("ビュ", "BYU"))
        chosen.add(Hiragana("ビョ", "BYO"))
        chosen.add(Hiragana("ミャ", "MYA"))
        chosen.add(Hiragana("ミュ", "MYU"))
        chosen.add(Hiragana("ミョ", "MYO"))
        chosen.add(Hiragana("ピャ", "PYA"))
        chosen.add(Hiragana("ピュ", "PYU"))
        chosen.add(Hiragana("ピョ", "PYO"))

        val list1: MutableList<String> = mutableListOf()
        val list2: MutableList<String> = mutableListOf()

        for(i in chosen){
            list1.add(i.syllable)
            list2.add(i.roman)
        }
        val arr1: Array<String> = list1.toTypedArray()
        val arr2: Array<String> = list2.toTypedArray()



        val intent = Intent(this,Test::class.java).apply{
            putExtra("syllable", arr1)
            putExtra("roman", arr2)
            putExtra("choice", message)
        }
        startActivity(intent)
    }

}